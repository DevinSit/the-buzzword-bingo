// Determines, from the given 2D array of buzzwords, if a line (i.e. winning state) has been made.
// Note: Yes this function could be refactored more; there's a good amount of duplication.
//
// @param buzzwords A 2D array of buzzwords (generated by `shuffleWords` below).
//
// @return An array of (x,y) coordinates for the winning state.
export const getWinningBoardState = (buzzwords) => {
    let winningState = [];
    let win = false;

    // Check rows for a line
    for (let i = 0; i < buzzwords.length; i++) {
        win = true;

        for (let j = 0; j < buzzwords.length; j++) {
            if (!buzzwords[i][j].selected) {
                win = false;
            }

            winningState.push([i, j]);
        }

        if (win) {
            return winningState;
        } else {
            winningState = [];
        }
    }

    // Check columns for a line
    for (let i = 0; i < buzzwords.length; i++) {
        win = true;

        for (let j = 0; j < buzzwords.length; j++) {
            if (!buzzwords[j][i].selected) {
                win = false;
            }

            winningState.push([j, i]);
        }

        if (win) {
            return winningState;
        } else {
            winningState = [];
        }
    }

    // Check diagonals for a line
    win = true;
    for (let i = 0; i < buzzwords.length; i++) {
        if (!buzzwords[i][i].selected) {
            win = false;
        }

        winningState.push([i, i]);
    }

    if (win) {
        return winningState;
    } else {
        winningState = [];
    }

    win = true;
    for (let i = 0; i < buzzwords.length; i++) {
        if (!buzzwords[i][4-i].selected) {
            win = false;
        }

        winningState.push([i, 4-i]);
    }

    if (win) {
        return winningState;
    } else {
        winningState = [];
    }

    return winningState;
};

export const shuffleWords = (words) => {
    // Randomly shuffle the words in-place
    for (let i = words.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [words[i], words[j]] = [words[j], words[i]];
    }

    let words_grid = [];

    // Chunk the 1D array of words into a 2D array to simulate the bingo card's grid.
    for (let i = 0, j = words.length; i < j; i += 5) {
        // Convert each word into a 'Buzzword' object.
        const objs = words.slice(i, i+5).map((text) => ({text, selected: false, win: false}));
        words_grid.push(objs);
    }

    words_grid[2][2].text += " (FREE)";
    words_grid[2][2].selected = true;

    return words_grid;
};
